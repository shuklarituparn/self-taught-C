String in C programming is a sequence of characters terminated with a null character ‘\0’.
Strings are defined as an array of characters. The difference between a character array and a
string is the string is terminated with a unique character ‘\0’.

Declaration of Strings

Declaring a string is as simple as declaring a one-dimensional array.
Below is the basic syntax for declaring a string.

//char str_name[size];//

char str[] = "GeeksforGeeks";  //initializing without a size, name acts as a pointer

char str[50] = "GeeksforGeeks";//initializing one with a size, 1 extra space needed for null char

char str[14] = { 'G','e','e','k','s','f','o','r','G','e','e','k','s','\0'};  //char by char assign. end must be "\0"

str:-            G           e           e          k            s            \0
address:-      0x23452     0x23453     0x23454    0x23455      0x23456      0x23457

/*

Can't assign arrays in C as well as can't assign strings

// C program to illustrate strings

#include <stdio.h>
#include <string.h>

int main()
{
	// declare and initialize string
	char str[] = "Geeks";

	// print string
	printf("%s\n", str);

	int length = 0;
	length = strlen(str);

	// displaying the length of string
	printf("Length of string str is %d", length);

	return 0;
}

*/

***************************************************//taking user input//************************************************

// C program to read string from user
#include<stdio.h>

int main()
{
	// declaring string
	char str[50];

	// reading string
	scanf("%s",str);

	// print string
	printf("%s",str);            //%s is for a null terminated string i.e. which ends in \0

	return 0;
}

The ‘&’ sign is used to provide the address of the variable to the scanf() function to store the value read in memory.
As str[] is a character array so using str without braces ‘[‘ and ‘]’ will give the base address of this string.
That’s why we have not used ‘&’ in this case as we are already providing the base address of the string to scanf.

*************************************************//taking line of text//************************************************

// C program to illustrate
// fgets()
#include <stdio.h>
#define MAX 50
int main()
{
	char str[MAX];

	// MAX Size if 50 defined
	fgets(str, MAX, stdin);

	printf("String is: \n");

	// Displaying Strings using Puts
	puts(str);

	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
PASSING STRING TO FUNCTIONS

// C program to illustrate how to
// pass string to functions
#include <stdio.h>

void printStr(char str[]) { printf("String is : %s", str); }

int main()
{
	// declare and initialize string
	char str[] = "GeeksforGeeks";

	// print string by passing string
	// to a different function
	printStr(str);

	return 0;
}

We can’t read a string value with spaces, we can use either gets() or fgets() in the C programming language.

************************************************//Strings and Pointers//************************************************


// C program to print string using Pointers
#include <stdio.h>

int main()
{

	char str[20] = "GeeksforGeeks";

	// Pointer variable which stores
	// the starting address of
	// the character array str
	char* ptr = str;

	// While loop will run till
	// the character value is not
	// equal to null character
	while (*ptr != '\0') {
		printf("%c", *ptr);

		// moving pointer to the next character.
		ptr++;
	}

	return 0;
}

******************************************//Concatenating n copying strings//*******************************************

strcat() function takes two values:

                                * A copy of the second string is stacked on the end of the first
                                *The combined version becomes the new string
                                *Second string is not altered in any way

*It returns the value of the first argument
                                *The address of the first character of the string to which the second string is added

char myString[]= "my string";
char input[80];

printf("Enter a string to be concatenated: ");
char input[80];

printf("\n the string %s concatenated with %s is::::::::\n",myString, input);
printf("%s", strcat(input, myString));

///////////////// IMP:

The strcat() function doesn't check the space in the string before concatenating it. It creates overflow problems.

use strncat() instead
        *takes a second argument asking maximum number of character to add

strncat(bugs,addon,13) will add the contents of the addon string to bugs, stopping when it reaches 13 additional
characters or the null characters, whichever comes first.

char src[50], dest[50];

strcpy (src, "This is source");   //copying "This is source" to src
strcpy(dest, "This is destination");

strncat(dest, src, 15);
printf("Final destination string |%s|", dest);



******************************************//Comparing  strings//********************************************************

if we want to compare two strings we can't use "==" as it will only check if the string has the same address

*there is a function called strcmp() for comparison of two strings

    *doesn't compare array, only string stored in different arrays
    *doesn't compares character

*it returns 0 if two string arguments are the same
                *value <0 then str1 is less than str2
                *value >0 then str2 is less than str1


*the strcmp() function compares strings till it finds corresponding character that differs
                *searching till the end of one string

*the strcmp() function compares the strings until they differ, or it reaches number of character specified by the third
argument
"
    *example: if wanted to limit the search to "astro" it's better to limit the comparison to the first 5 char

if(strncmp("astronomy","astro",5)==0{
        printf("found: astronomy");
}
if(strncmp("astounding", "astro", 5)==0){
        printf("Found: astounding");
}

******************************************//Searching strings//*********************************************************

To search a single character use strchr()
To search a string use strstr()

*****************************************//Tokenizing strings//*********************************************************

Breaking a sentence into words is tokenizing

use: strtok()

*****************************************//Pointers in strings//********************************************************

pointer is a variable that stores a memory address of some other variable

int number =23
int *pNumber= &Number;

* used to declare a pointer. *pNumber is a pointer that contains the address of the var. Number

to get the value of the pointer just use *

*****************************************//Searching string for char//**************************************************

to the strchr() we provide 2 arguments.
                            1. Address of the char array
                            2. Character that we are looking for

the function will return a pointer to location where the char is.
                            *address of the location of the char in memory
                            * of type char* (pointer to char)

to store this value, need a var thar can store it
                             *in case of unsuccessful search will return a null pointer

char str[]= "quick brown fox";     //string that we want to search
char ch='q';                            //character we want
char *pGot_char= NULL;                     //initializing the pointer var
pGot_char=strchr(str,ch);    //stores the address of the char in the pointer variable

***************************************//Searching string for string//**************************************************

similar to strchr() we have strstr()

char str[]= "quick brown fox";     //string that we want to search
char word []='quick';                            //string we want
char *pFound= NULL;                     //initializing the pointer var
pFound=strstr(str,word);

Search is case-sensitive.

***************************************//Useful string functions//******************************************************

islower() to check lowercase
isupper() to check for uppercase
isalpha() to check if it is an alphabet
isalnum() uppercase or lowercase letter or digit
iscntrl() control character test
isprint() any printing char inc space
isgraph() any printing char except space
isdigit() decimal digit check
isblank() standard blank char
isspace() whitespace char
ispunct() printing character for which isspace() and isalnum() returns false

using #include<stdlib.h> can make string to numerical

atof() ----string to double
atoi()------string to integer
atol()------string to long
atoll()------string to double long
strtod()-----string to double from intial part of the string
strtof()-------string to float
strtold()--------string to long double

***************************************//Passing string to a function//*************************************************


The accepted convention of passing C-strings to functions is to use a pointer:

void function(char* name)
When the function modifies the string you should also pass in the length:

void function(char* name, size_t name_length)
Your first example:

char *functionname(char *name[256])
passes an array of pointers to strings which is not what you need at all.

Your second example:

char functionname(char name[256])
passes an array of chars. The size of the array here doesn't matter and the parameter will decay to a pointer anyway, so this is equivalent to:

char functionname(char *name)
See also this question for more details on array arguments in C.

************************************************************************************************************************

pointers and array: Both array[i] and *(array+i) are correct notation.

ar++ only works if arr is a pointer variable
